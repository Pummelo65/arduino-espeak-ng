*** original/src/include/espeak-ng/speak_lib.h	2022-10-27 18:30:17.000000000 +0200
--- src/speak_lib.h	2022-11-13 19:07:08.000000000 +0100
***************
*** 1,6 ****
  #ifndef SPEAK_LIB_H
  #define SPEAK_LIB_H
! /***************************************************************************
   *   Copyright (C) 2005 to 2012 by Jonathan Duddington                     *
   *   email: jonsd@users.sourceforge.net                                    *
   *                                                                         *
--- 1,6 ----
  #ifndef SPEAK_LIB_H
  #define SPEAK_LIB_H
! /*!<**************************************************************************
   *   Copyright (C) 2005 to 2012 by Jonathan Duddington                     *
   *   email: jonsd@users.sourceforge.net                                    *
   *                                                                         *
***************
*** 20,29 ****
   ***************************************************************************/
  
  
! /*************************************************************/
! /* This is the header file for the library version of espeak */
! /*                                                           */
! /*************************************************************/
  
  #include <stdio.h>
  #include <stddef.h>
--- 20,29 ----
   ***************************************************************************/
  
  
! /*!<************************************************************/
! /*!< This is the header file for the library version of espeak */
! /*!<                                                           */
! /*!<************************************************************/
  
  #include <stdio.h>
  #include <stddef.h>
***************
*** 39,45 ****
  #endif
  
  #define ESPEAK_API_REVISION  12
! /*
  Revision 2
     Added parameter "options" to eSpeakInitialize()
  
--- 39,45 ----
  #endif
  
  #define ESPEAK_API_REVISION  12
! /*!<
  Revision 2
     Added parameter "options" to eSpeakInitialize()
  
***************
*** 75,83 ****
    Exposed espeak_SetPhonemeCallback. This is available in eSpeak, but was not exposed in this header.
  
  */
!          /********************/
!          /*  Initialization  */
!          /********************/
  
  // values for 'value' in espeak_SetParameter(espeakRATE, value, 0), nominally in words-per-minute
  #define espeakRATE_MINIMUM  80
--- 75,83 ----
    Exposed espeak_SetPhonemeCallback. This is available in eSpeak, but was not exposed in this header.
  
  */
!          /*!<*******************/
!          /*!<  Initialization  */
!          /*!<*******************/
  
  // values for 'value' in espeak_SetParameter(espeakRATE, value, 0), nominally in words-per-minute
  #define espeakRATE_MINIMUM  80
***************
*** 113,119 ****
  		char string[8];    // used for phoneme names (UTF8). Terminated by a zero byte unless the name needs the full 8 bytes.
  	} id;
  } espeak_EVENT;
! /*
     When a message is supplied to espeak_synth, the request is buffered and espeak_synth returns. When the message is really processed, the callback function will be repetedly called.
  
  
--- 113,119 ----
  		char string[8];    // used for phoneme names (UTF8). Terminated by a zero byte unless the name needs the full 8 bytes.
  	} id;
  } espeak_EVENT;
! /*!<
     When a message is supplied to espeak_synth, the request is buffered and espeak_synth returns. When the message is really processed, the callback function will be repetedly called.
  
  
***************
*** 166,181 ****
  
  
  typedef enum {
! 	/* PLAYBACK mode: plays the audio data, supplies events to the calling program*/
  	AUDIO_OUTPUT_PLAYBACK,
  
! 	/* RETRIEVAL mode: supplies audio data and events to the calling program */
  	AUDIO_OUTPUT_RETRIEVAL,
  
! 	/* SYNCHRONOUS mode: as RETRIEVAL but doesn't return until synthesis is completed */
  	AUDIO_OUTPUT_SYNCHRONOUS,
  
! 	/* Synchronous playback */
  	AUDIO_OUTPUT_SYNCH_PLAYBACK
  
  } espeak_AUDIO_OUTPUT;
--- 166,181 ----
  
  
  typedef enum {
! 	/*! PLAYBACK mode: plays the audio data, supplies events to the calling program*/
  	AUDIO_OUTPUT_PLAYBACK,
  
! 	/*! RETRIEVAL mode: supplies audio data and events to the calling program */
  	AUDIO_OUTPUT_RETRIEVAL,
  
! 	/*! SYNCHRONOUS mode: as RETRIEVAL but doesn't return until synthesis is completed */
  	AUDIO_OUTPUT_SYNCHRONOUS,
  
! 	/*! Synchronous playback */
  	AUDIO_OUTPUT_SYNCH_PLAYBACK
  
  } espeak_AUDIO_OUTPUT;
***************
*** 196,202 ****
  extern "C"
  #endif
  ESPEAK_API int espeak_Initialize(espeak_AUDIO_OUTPUT output, int buflength, const char *path, int options);
! /* Must be called before any synthesis functions are called.
     output: the audio data can either be played by eSpeak or passed back by the SynthCallback function.
  
     buflength:  The length in mS of sound buffers passed to the SynthCallback function.
--- 196,202 ----
  extern "C"
  #endif
  ESPEAK_API int espeak_Initialize(espeak_AUDIO_OUTPUT output, int buflength, const char *path, int options);
! /*!< Must be called before any synthesis functions are called.
     output: the audio data can either be played by eSpeak or passed back by the SynthCallback function.
  
     buflength:  The length in mS of sound buffers passed to the SynthCallback function.
***************
*** 218,224 ****
  extern "C"
  #endif
  ESPEAK_API void espeak_SetSynthCallback(t_espeak_callback* SynthCallback);
! /* Must be called before any synthesis functions are called.
     This specifies a function in the calling program which is called when a buffer of
     speech sound data has been produced.
  
--- 218,224 ----
  extern "C"
  #endif
  ESPEAK_API void espeak_SetSynthCallback(t_espeak_callback* SynthCallback);
! /*!< Must be called before any synthesis functions are called.
     This specifies a function in the calling program which is called when a buffer of
     speech sound data has been produced.
  
***************
*** 246,252 ****
  extern "C"
  #endif
  ESPEAK_API void espeak_SetUriCallback(int (*UriCallback)(int, const char*, const char*));
! /* This function may be called before synthesis functions are used, in order to deal with
     <audio> tags.  It specifies a callback function which is called when an <audio> element is
     encountered and allows the calling program to indicate whether the sound file which
     is specified in the <audio> element is available and is to be played.
--- 246,252 ----
  extern "C"
  #endif
  ESPEAK_API void espeak_SetUriCallback(int (*UriCallback)(int, const char*, const char*));
! /*!< This function may be called before synthesis functions are used, in order to deal with
     <audio> tags.  It specifies a callback function which is called when an <audio> element is
     encountered and allows the calling program to indicate whether the sound file which
     is specified in the <audio> element is available and is to be played.
***************
*** 272,280 ****
  ESPEAK_API void espeak_SetPhonemeCallback(int (*PhonemeCallback)(const char *));
  
  
!          /********************/
!          /*    Synthesis     */
!          /********************/
  
  
  #define espeakCHARS_AUTO   0
--- 272,280 ----
  ESPEAK_API void espeak_SetPhonemeCallback(int (*PhonemeCallback)(const char *));
  
  
!          /*!<*******************/
!          /*!<    Synthesis     */
!          /*!<*******************/
  
  
  #define espeakCHARS_AUTO   0
***************
*** 299,305 ****
  	unsigned int flags,
  	unsigned int* unique_identifier,
  	void* user_data);
! /* Synthesize speech for the specified text.  The speech sound data is passed to the calling
     program in buffers by means of the callback function specified by espeak_SetSynthCallback(). The command is asynchronous: it is internally buffered and returns as soon as possible. If espeak_Initialize was previously called with AUDIO_OUTPUT_PLAYBACK as argument, the sound data are played by eSpeak.
  
     text: The text to be spoken, terminated by a zero character. It may be either 8-bit characters,
--- 299,305 ----
  	unsigned int flags,
  	unsigned int* unique_identifier,
  	void* user_data);
! /*!< Synthesize speech for the specified text.  The speech sound data is passed to the calling
     program in buffers by means of the callback function specified by espeak_SetSynthCallback(). The command is asynchronous: it is internally buffered and returns as soon as possible. If espeak_Initialize was previously called with AUDIO_OUTPUT_PLAYBACK as argument, the sound data are played by eSpeak.
  
     text: The text to be spoken, terminated by a zero character. It may be either 8-bit characters,
***************
*** 358,364 ****
  	unsigned int flags,
  	unsigned int* unique_identifier,
  	void* user_data);
! /* Synthesize speech for the specified text.  Similar to espeak_Synth() but the start position is
     specified by the name of a <mark> element in the text.
  
     index_mark:  The "name" attribute of a <mark> element within the text which specified the
--- 358,364 ----
  	unsigned int flags,
  	unsigned int* unique_identifier,
  	void* user_data);
! /*!< Synthesize speech for the specified text.  Similar to espeak_Synth() but the start position is
     specified by the name of a <mark> element in the text.
  
     index_mark:  The "name" attribute of a <mark> element within the text which specified the
***************
*** 376,382 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Key(const char *key_name);
! /* Speak the name of a keyboard key.
     If key_name is a single character, it speaks the name of the character.
     Otherwise, it speaks key_name as a text string.
  
--- 376,382 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Key(const char *key_name);
! /*!< Speak the name of a keyboard key.
     If key_name is a single character, it speaks the name of the character.
     Otherwise, it speaks key_name as a text string.
  
***************
*** 390,396 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Char(wchar_t character);
! /* Speak the name of the given character
  
     Return: EE_OK: operation achieved
             EE_BUFFER_FULL: the command can not be buffered;
--- 390,396 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Char(wchar_t character);
! /*!< Speak the name of the given character
  
     Return: EE_OK: operation achieved
             EE_BUFFER_FULL: the command can not be buffered;
***************
*** 401,412 ****
  
  
  
!          /***********************/
!          /*  Speech Parameters  */
!          /***********************/
  
  typedef enum {
!   espeakSILENCE=0, /* internal use */
    espeakRATE=1,
    espeakVOLUME=2,
    espeakPITCH=3,
--- 401,412 ----
  
  
  
!          /*!<**********************/
!          /*!<  Speech Parameters  */
!          /*!<**********************/
  
  typedef enum {
!   espeakSILENCE=0, /*!< internal use */
    espeakRATE=1,
    espeakVOLUME=2,
    espeakPITCH=3,
***************
*** 419,428 ****
  
    espeakRESERVED1=10,
    espeakRESERVED2=11,
!   espeakEMPHASIS,   /* internal use */
!   espeakLINELENGTH, /* internal use */
    espeakVOICETYPE,  // internal, 1=mbrola
!   N_SPEECH_PARAM    /* last enum */
  } espeak_PARAMETER;
  
  typedef enum {
--- 419,428 ----
  
    espeakRESERVED1=10,
    espeakRESERVED2=11,
!   espeakEMPHASIS,   /*!< internal use */
!   espeakLINELENGTH, /*!< internal use */
    espeakVOICETYPE,  // internal, 1=mbrola
!   N_SPEECH_PARAM    /*!< last enum */
  } espeak_PARAMETER;
  
  typedef enum {
***************
*** 435,441 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetParameter(espeak_PARAMETER parameter, int value, int relative);
! /* Sets the value of the specified parameter.
     relative=0   Sets the absolute value of the parameter.
     relative=1   Sets a relative value of the parameter.
  
--- 435,441 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetParameter(espeak_PARAMETER parameter, int value, int relative);
! /*!< Sets the value of the specified parameter.
     relative=0   Sets the absolute value of the parameter.
     relative=1   Sets a relative value of the parameter.
  
***************
*** 472,478 ****
  extern "C"
  #endif
  ESPEAK_API int espeak_GetParameter(espeak_PARAMETER parameter, int current);
! /* current=0  Returns the default value of the specified parameter.
     current=1  Returns the current value of the specified parameter, as set by SetParameter()
  */
  
--- 472,478 ----
  extern "C"
  #endif
  ESPEAK_API int espeak_GetParameter(espeak_PARAMETER parameter, int current);
! /*!< current=0  Returns the default value of the specified parameter.
     current=1  Returns the current value of the specified parameter, as set by SetParameter()
  */
  
***************
*** 480,486 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetPunctuationList(const wchar_t *punctlist);
! /* Specified a list of punctuation characters whose names are to be spoken when the
     value of the Punctuation parameter is set to "some".
  
     punctlist:  A list of character codes, terminated by a zero character.
--- 480,486 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetPunctuationList(const wchar_t *punctlist);
! /*!< Specified a list of punctuation characters whose names are to be spoken when the
     value of the Punctuation parameter is set to "some".
  
     punctlist:  A list of character codes, terminated by a zero character.
***************
*** 501,507 ****
  extern "C"
  #endif
  ESPEAK_API void espeak_SetPhonemeTrace(int phonememode, FILE *stream);
! /* phonememode:  Controls the output of phoneme symbols for the text
        bits 0-2:
           value=0  No phoneme output (default)
           value=1  Output the translated phoneme symbols for the text
--- 501,507 ----
  extern "C"
  #endif
  ESPEAK_API void espeak_SetPhonemeTrace(int phonememode, FILE *stream);
! /*!< phonememode:  Controls the output of phoneme symbols for the text
        bits 0-2:
           value=0  No phoneme output (default)
           value=1  Output the translated phoneme symbols for the text
***************
*** 518,524 ****
  extern "C"
  #endif
  ESPEAK_API const char *espeak_TextToPhonemes(const void **textptr, int textmode, int phonememode);
! /* Translates text into phonemes.  Call espeak_SetVoiceByName() first, to select a language.
  
     It returns a pointer to a character string which contains the phonemes for the text up to
     end of a sentence, or comma, semicolon, colon, or similar punctuation.
--- 518,524 ----
  extern "C"
  #endif
  ESPEAK_API const char *espeak_TextToPhonemes(const void **textptr, int textmode, int phonememode);
! /*!< Translates text into phonemes.  Call espeak_SetVoiceByName() first, to select a language.
  
     It returns a pointer to a character string which contains the phonemes for the text up to
     end of a sentence, or comma, semicolon, colon, or similar punctuation.
***************
*** 545,551 ****
  extern "C"
  #endif
  ESPEAK_API void espeak_CompileDictionary(const char *path, FILE *log, int flags);
! /* Compile pronunciation dictionary for a language which corresponds to the currently
     selected voice.  The required voice should be selected before calling this function.
  
     path:  The directory which contains the language's '_rules' and '_list' files.
--- 545,551 ----
  extern "C"
  #endif
  ESPEAK_API void espeak_CompileDictionary(const char *path, FILE *log, int flags);
! /*!< Compile pronunciation dictionary for a language which corresponds to the currently
     selected voice.  The required voice should be selected before calling this function.
  
     path:  The directory which contains the language's '_rules' and '_list' files.
***************
*** 555,563 ****
     flags:  Bit 0: include source line information for debug purposes (This is displayed with the
            -X command line option).
  */
!          /***********************/
!          /*   Voice Selection   */
!          /***********************/
  
  
  // voice table
--- 555,563 ----
     flags:  Bit 0: include source line information for debug purposes (This is displayed with the
            -X command line option).
  */
!          /*!<**********************/
!          /*!<   Voice Selection   */
!          /*!<**********************/
  
  
  // voice table
***************
*** 573,579 ****
  	void *spare;     // for internal use
  } espeak_VOICE;
  
! /* Note: The espeak_VOICE structure is used for two purposes:
    1.  To return the details of the available voices.
    2.  As a parameter to  espeak_SetVoiceByProperties() in order to specify selection criteria.
  
--- 573,579 ----
  	void *spare;     // for internal use
  } espeak_VOICE;
  
! /*!< Note: The espeak_VOICE structure is used for two purposes:
    1.  To return the details of the available voices.
    2.  As a parameter to  espeak_SetVoiceByProperties() in order to specify selection criteria.
  
***************
*** 598,604 ****
  extern "C"
  #endif
  ESPEAK_API const espeak_VOICE **espeak_ListVoices(espeak_VOICE *voice_spec);
! /* Reads the voice files from espeak-ng-data/voices and creates an array of espeak_VOICE pointers.
     The list is terminated by a NULL pointer
  
     If voice_spec is NULL then all voices are listed.
--- 598,604 ----
  extern "C"
  #endif
  ESPEAK_API const espeak_VOICE **espeak_ListVoices(espeak_VOICE *voice_spec);
! /*!< Reads the voice files from espeak-ng-data/voices and creates an array of espeak_VOICE pointers.
     The list is terminated by a NULL pointer
  
     If voice_spec is NULL then all voices are listed.
***************
*** 610,616 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByFile(const char *filename);
! /* Loads a voice given the file path.  Language is not considered.
     "filename" is a UTF8 string.
  
     Return: EE_OK: operation achieved
--- 610,616 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByFile(const char *filename);
! /*!< Loads a voice given the file path.  Language is not considered.
     "filename" is a UTF8 string.
  
     Return: EE_OK: operation achieved
***************
*** 623,629 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByName(const char *name);
! /* Searches for a voice with a matching "name" field.  Language is not considered.
     "name" is a UTF8 string.
  
     Return: EE_OK: operation achieved
--- 623,629 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByName(const char *name);
! /*!< Searches for a voice with a matching "name" field.  Language is not considered.
     "name" is a UTF8 string.
  
     Return: EE_OK: operation achieved
***************
*** 636,642 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByProperties(espeak_VOICE *voice_spec);
! /* An espeak_VOICE structure is used to pass criteria to select a voice.  Any of the following
     fields may be set:
  
     name     NULL, or a voice name
--- 636,642 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_SetVoiceByProperties(espeak_VOICE *voice_spec);
! /*!< An espeak_VOICE structure is used to pass criteria to select a voice.  Any of the following
     fields may be set:
  
     name     NULL, or a voice name
***************
*** 656,662 ****
  extern "C"
  #endif
  ESPEAK_API espeak_VOICE *espeak_GetCurrentVoice(void);
! /* Returns the espeak_VOICE data for the currently selected voice.
     This is not affected by temporary voice changes caused by SSML elements such as <voice> and <s>
  */
  
--- 656,662 ----
  extern "C"
  #endif
  ESPEAK_API espeak_VOICE *espeak_GetCurrentVoice(void);
! /*!< Returns the espeak_VOICE data for the currently selected voice.
     This is not affected by temporary voice changes caused by SSML elements such as <voice> and <s>
  */
  
***************
*** 664,670 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Cancel(void);
! /* Stop immediately synthesis and audio output of the current text. When this
     function returns, the audio output is fully stopped and the synthesizer is ready to
     synthesize a new message.
  
--- 664,670 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Cancel(void);
! /*!< Stop immediately synthesis and audio output of the current text. When this
     function returns, the audio output is fully stopped and the synthesizer is ready to
     synthesize a new message.
  
***************
*** 677,690 ****
  extern "C"
  #endif
  ESPEAK_API int espeak_IsPlaying(void);
! /* Returns 1 if audio is played, 0 otherwise.
  */
  
  #ifdef __cplusplus
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Synchronize(void);
! /* This function returns when all data have been spoken.
     Return: EE_OK: operation achieved
  	   EE_INTERNAL_ERROR.
  */
--- 677,690 ----
  extern "C"
  #endif
  ESPEAK_API int espeak_IsPlaying(void);
! /*!< Returns 1 if audio is played, 0 otherwise.
  */
  
  #ifdef __cplusplus
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Synchronize(void);
! /*!< This function returns when all data have been spoken.
     Return: EE_OK: operation achieved
  	   EE_INTERNAL_ERROR.
  */
***************
*** 693,699 ****
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Terminate(void);
! /* last function to be called.
     Return: EE_OK: operation achieved
  	   EE_INTERNAL_ERROR.
  */
--- 693,699 ----
  extern "C"
  #endif
  ESPEAK_API espeak_ERROR espeak_Terminate(void);
! /*!< last function to be called.
     Return: EE_OK: operation achieved
  	   EE_INTERNAL_ERROR.
  */
***************
*** 703,709 ****
  extern "C"
  #endif
  ESPEAK_API const char *espeak_Info(const char **path_data);
! /* Returns the version number string.
     path_data  returns the path to espeak_data
  */
  #endif
--- 703,709 ----
  extern "C"
  #endif
  ESPEAK_API const char *espeak_Info(const char **path_data);
! /*!< Returns the version number string.
     path_data  returns the path to espeak_data
  */
  #endif
