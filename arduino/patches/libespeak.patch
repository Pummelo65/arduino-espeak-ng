Only in original/src/libespeak-ng: .deps
Only in original/src/libespeak-ng: .dirstamp
Common subdirectories: original/src/libespeak-ng/.libs and src/libespeak-ng/.libs
diff -c original/src/libespeak-ng/common.c src/libespeak-ng/common.c
*** original/src/libespeak-ng/common.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/common.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
diff -c original/src/libespeak-ng/compiledata.c src/libespeak-ng/compiledata.c
*** original/src/libespeak-ng/compiledata.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/compiledata.c	2022-11-17 20:31:04.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
***************
*** 29,35 ****
  #include <string.h>
  #include <sys/stat.h>
  #include <time.h>
! #include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
--- 29,35 ----
  #include <string.h>
  #include <sys/stat.h>
  #include <time.h>
! //#include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
diff -c original/src/libespeak-ng/compiledict.c src/libespeak-ng/compiledict.c
*** original/src/libespeak-ng/compiledict.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/compiledict.c	2022-11-17 21:12:47.000000000 +0100
***************
*** 18,24 ****
   *             <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 18,24 ----
   *             <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
Only in original/src/libespeak-ng: compilembrola.c
diff -c original/src/libespeak-ng/dictionary.c src/libespeak-ng/dictionary.c
*** original/src/libespeak-ng/dictionary.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/dictionary.c	2022-11-17 21:10:23.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <stdint.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <stdint.h>
***************
*** 211,238 ****
  	// bytes 0-3:  offset to rules data
  	// bytes 4-7:  number of hash table entries
  	sprintf(fname, "%s%c%s_dict", path_home, PATHSEP, name);
- 	size = GetFileLength(fname);
  
! 	if (tr->data_dictlist != NULL) {
! 		free(tr->data_dictlist);
! 		tr->data_dictlist = NULL;
! 	}
  
! 	f = fopen(fname, "rb");
! 	if ((f == NULL) || (size <= 0)) {
! 		if (no_error == 0)
! 			fprintf(stderr, "Can't read dictionary file: '%s'\n", fname);
! 		if (f != NULL)
! 			fclose(f);
! 		return 1;
! 	}
  
! 	if ((tr->data_dictlist = malloc(size)) == NULL) {
  		fclose(f);
- 		return 3;
  	}
- 	size = fread(tr->data_dictlist, 1, size, f);
- 	fclose(f);
  
  	pw = (int *)(tr->data_dictlist);
  	length = Reverse4Bytes(pw[1]);
--- 211,245 ----
  	// bytes 0-3:  offset to rules data
  	// bytes 4-7:  number of hash table entries
  	sprintf(fname, "%s%c%s_dict", path_home, PATHSEP, name);
  
! 	// Arduino memory hack using mem_map from https://github.com/pschatzmann/arduino-posix-fs
! 	void* ptr = espeak_mem_map(fname, &size);
! 	if (ptr!=NULL){
! 		tr->data_dictlist = ptr;
! 	} else {
! 		size = GetFileLength(fname);
  
! 		if (tr->data_dictlist != NULL) {
! 			free(tr->data_dictlist);
! 			tr->data_dictlist = NULL;
! 		}
  
! 		f = fopen(fname, "rb");
! 		if ((f == NULL) || (size <= 0)) {
! 			if (no_error == 0)
! 				fprintf(stderr, "Can't read dictionary file: '%s'\n", fname);
! 			if (f != NULL)
! 				fclose(f);
! 			return 1;
! 		}
! 
! 		if ((tr->data_dictlist = malloc(size)) == NULL) {
! 			fclose(f);
! 			return 3;
! 		}
! 		size = fread(tr->data_dictlist, 1, size, f);
  		fclose(f);
  	}
  
  	pw = (int *)(tr->data_dictlist);
  	length = Reverse4Bytes(pw[1]);
***************
*** 918,924 ****
  	int dflags = 0;
  	int first_primary;
  	int long_vowel;
! 
  	signed char vowel_stress[N_WORD_PHONEMES/2];
  	char syllable_weight[N_WORD_PHONEMES/2];
  	char vowel_length[N_WORD_PHONEMES/2];
--- 925,931 ----
  	int dflags = 0;
  	int first_primary;
  	int long_vowel;
! //  TODO pschatzmann: Memory Hack ?
  	signed char vowel_stress[N_WORD_PHONEMES/2];
  	char syllable_weight[N_WORD_PHONEMES/2];
  	char vowel_length[N_WORD_PHONEMES/2];
diff -c original/src/libespeak-ng/encoding.c src/libespeak-ng/encoding.c
*** original/src/libespeak-ng/encoding.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/encoding.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 15,21 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <string.h>
  #include <stdint.h>
--- 15,21 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <string.h>
  #include <stdint.h>
diff -c original/src/libespeak-ng/error.c src/libespeak-ng/error.c
*** original/src/libespeak-ng/error.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/error.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 16,22 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <errno.h>
  #include <stdint.h>
--- 16,22 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <errno.h>
  #include <stdint.h>
diff -c original/src/libespeak-ng/espeak_api.c src/libespeak-ng/espeak_api.c
*** original/src/libespeak-ng/espeak_api.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/espeak_api.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <stdint.h>
  #include <stdlib.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <stdint.h>
  #include <stdlib.h>
diff -c original/src/libespeak-ng/espeak_command.c src/libespeak-ng/espeak_command.c
*** original/src/libespeak-ng/espeak_command.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/espeak_command.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 16,22 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <assert.h>
  #include <stdlib.h>
--- 16,22 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <assert.h>
  #include <stdlib.h>
diff -c original/src/libespeak-ng/event.c src/libespeak-ng/event.c
*** original/src/libespeak-ng/event.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/event.c	2022-11-17 20:31:09.000000000 +0100
***************
*** 18,24 ****
  
  // This source file is only used for asynchronous modes
  
! #include "config.h"
  
  #include <assert.h>
  #include <errno.h>
--- 18,24 ----
  
  // This source file is only used for asynchronous modes
  
! #include "config-espk.h"
  
  #include <assert.h>
  #include <errno.h>
***************
*** 28,34 ****
  #include <stdlib.h>
  #include <string.h>
  #include <sys/time.h>
! #include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
--- 28,34 ----
  #include <stdlib.h>
  #include <string.h>
  #include <sys/time.h>
! //#include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
diff -c original/src/libespeak-ng/fifo.c src/libespeak-ng/fifo.c
*** original/src/libespeak-ng/fifo.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/fifo.c	2022-11-17 20:31:15.000000000 +0100
***************
*** 18,24 ****
  
  // This source file is only used for asynchronous modes
  
! #include "config.h"
  
  #include <assert.h>
  #include <errno.h>
--- 18,24 ----
  
  // This source file is only used for asynchronous modes
  
! #include "config-espk.h"
  
  #include <assert.h>
  #include <errno.h>
***************
*** 29,35 ****
  #include <string.h>
  #include <sys/time.h>
  #include <time.h>
! #include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  
--- 29,35 ----
  #include <string.h>
  #include <sys/time.h>
  #include <time.h>
! //#include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  
diff -c original/src/libespeak-ng/intonation.c src/libespeak-ng/intonation.c
*** original/src/libespeak-ng/intonation.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/intonation.c	2022-11-17 21:06:12.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <stdint.h>
  #include <stdio.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <stdint.h>
  #include <stdio.h>
***************
*** 937,943 ****
--- 937,948 ----
  	PHONEME_TAB *ph;
  	int ph_end = n_phoneme_list;
  
+ #if ESPEAK_STACK_HACK
+ 	SYLLABLE *syllable_tab = calloc(1, sizeof(SYLLABLE)*N_PHONEME_LIST);
+ 	assert(syllable_tab!=NULL);
+ #else
  	SYLLABLE syllable_tab[N_PHONEME_LIST];
+ #endif
  	n_st = 0;
  	n_primary = 0;
  	for (ix = 0; ix < (n_phoneme_list-1); ix++) {
***************
*** 956,966 ****
  	syllable_tab[n_st].stress = 0; // extra 0 entry at the end
  
  	if (n_st == 0)
! 		return; // nothing to do
  
  	if (tr->langopts.tone_language == 1) {
  		CalcPitches_Tone(tr);
! 		return;
  	}
  
  	option = tr->langopts.intonation_group;
--- 961,973 ----
  	syllable_tab[n_st].stress = 0; // extra 0 entry at the end
  
  	if (n_st == 0)
! 		goto end_CalcPitches;
! 		//return; // nothing to do
  
  	if (tr->langopts.tone_language == 1) {
  		CalcPitches_Tone(tr);
! 		goto end_CalcPitches;
! //		return;
  	}
  
  	option = tr->langopts.intonation_group;
***************
*** 1095,1098 ****
--- 1102,1110 ----
  			st_ix++;
  		}
  	}
+ end_CalcPitches:
+ #if ESPEAK_STACK_HACK
+ 	free(syllable_tab);
+ #endif
+ 	return;
  }
diff -c original/src/libespeak-ng/klatt.c src/libespeak-ng/klatt.c
*** original/src/libespeak-ng/klatt.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/klatt.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 23,29 ****
  
  // See URL: ftp://svr-ftp.eng.cam.ac.uk/pub/comp.speech/synthesis/klatt.3.04.tar.gz
  
! #include "config.h"
  
  #include <math.h>
  #include <stdint.h>
--- 23,29 ----
  
  // See URL: ftp://svr-ftp.eng.cam.ac.uk/pub/comp.speech/synthesis/klatt.3.04.tar.gz
  
! #include "config-espk.h"
  
  #include <math.h>
  #include <stdint.h>
diff -c original/src/libespeak-ng/langopts.c src/libespeak-ng/langopts.c
*** original/src/libespeak-ng/langopts.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/langopts.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
Only in original/src/libespeak-ng: mbrowrap.c
Only in original/src/libespeak-ng: mbrowrap.h
diff -c original/src/libespeak-ng/mnemonics.c src/libespeak-ng/mnemonics.c
*** original/src/libespeak-ng/mnemonics.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/mnemonics.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <string.h>
  
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <string.h>
  
diff -c original/src/libespeak-ng/numbers.c src/libespeak-ng/numbers.c
*** original/src/libespeak-ng/numbers.c	2022-11-01 10:06:27.000000000 +0100
--- src/libespeak-ng/numbers.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <stdbool.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <stdbool.h>
diff -c original/src/libespeak-ng/phoneme.c src/libespeak-ng/phoneme.c
*** original/src/libespeak-ng/phoneme.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/phoneme.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 15,21 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <errno.h>
  #include <stdint.h>
--- 15,21 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <errno.h>
  #include <stdint.h>
diff -c original/src/libespeak-ng/phonemelist.c src/libespeak-ng/phonemelist.c
*** original/src/libespeak-ng/phonemelist.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/phonemelist.c	2022-11-17 21:04:05.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <stdbool.h>
  #include <stdint.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <stdbool.h>
  #include <stdint.h>
***************
*** 136,153 ****
  	int word_start;
  	bool inserted;
  	bool deleted;
- 	PHONEME_DATA phdata;
  	bool start_of_clause = true;
  
  	int n_ph_list3;
  	PHONEME_LIST *plist3;
  	PHONEME_LIST *plist3_inserted = NULL;
- 	PHONEME_LIST ph_list3[N_PHONEME_LIST];
  
  	PHONEME_LIST2 *plist2;
- 	WORD_PH_DATA worddata;
  
! 	memset(&worddata, 0, sizeof(worddata));
  	plist2 = ph_list2;
  	phlist = phoneme_list;
  	end_sourceix = plist2[n_ph_list2-1].sourceix;
--- 136,159 ----
  	int word_start;
  	bool inserted;
  	bool deleted;
  	bool start_of_clause = true;
  
  	int n_ph_list3;
  	PHONEME_LIST *plist3;
  	PHONEME_LIST *plist3_inserted = NULL;
  
  	PHONEME_LIST2 *plist2;
  
! #if ESPEAK_STACK_HACK
! 	PHONEME_LIST *ph_list3 = calloc(1, sizeof(PHONEME_LIST)*N_PHONEME_LIST);
! 	assert(ph_list3!=NULL);
! #else
! 	PHONEME_LIST ph_list3[N_PHONEME_LIST];
! #endif
! 	STACK_T PHONEME_DATA phdata;
! 	STACK_T WORD_PH_DATA worddata;
! 	memset(&worddata, 0, sizeof(WORD_PH_DATA));
! 	
  	plist2 = ph_list2;
  	phlist = phoneme_list;
  	end_sourceix = plist2[n_ph_list2-1].sourceix;
***************
*** 593,596 ****
--- 599,607 ----
  	n_phoneme_list = ix;
  
  	SelectPhonemeTable(tr->phoneme_tab_ix);
+ 
+ #if ESPEAK_STACK_HACK
+ 	if(ph_list3)
+ 		free(ph_list3);
+ #endif
  }
diff -c original/src/libespeak-ng/readclause.c src/libespeak-ng/readclause.c
*** original/src/libespeak-ng/readclause.c	2022-11-13 17:02:43.000000000 +0100
--- src/libespeak-ng/readclause.c	2022-11-17 20:31:21.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
***************
*** 27,33 ****
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! #include <unistd.h>
  #include <wchar.h>
  #include <wctype.h>
  
--- 27,33 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! //#include <unistd.h>
  #include <wchar.h>
  #include <wctype.h>
  
***************
*** 38,44 ****
  
  #include "readclause.h"
  #include "common.h"               // for GetFileLength, strncpy0
! #include "config.h"               // for HAVE_MKSTEMP
  #include "dictionary.h"           // for LookupDictList, DecodePhonemes, Set...
  #include "error.h"                // for create_file_error_context
  #include "phoneme.h"              // for phonSWITCH
--- 38,44 ----
  
  #include "readclause.h"
  #include "common.h"               // for GetFileLength, strncpy0
! #include "config-espk.h"               // for HAVE_MKSTEMP
  #include "dictionary.h"           // for LookupDictList, DecodePhonemes, Set...
  #include "error.h"                // for create_file_error_context
  #include "phoneme.h"              // for phonSWITCH
Only in original/src/libespeak-ng: sPlayer.c
Only in original/src/libespeak-ng: sPlayer.h
diff -c original/src/libespeak-ng/setlengths.c src/libespeak-ng/setlengths.c
*** original/src/libespeak-ng/setlengths.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/setlengths.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <errno.h>
  #include <stdint.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <errno.h>
  #include <stdint.h>
diff -c original/src/libespeak-ng/soundicon.c src/libespeak-ng/soundicon.c
*** original/src/libespeak-ng/soundicon.c	2022-11-01 10:06:27.000000000 +0100
--- src/libespeak-ng/soundicon.c	2022-11-17 20:31:27.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
***************
*** 28,34 ****
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! #include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
--- 28,34 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! //#include <unistd.h>
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
diff -c original/src/libespeak-ng/spect.c src/libespeak-ng/spect.c
*** original/src/libespeak-ng/spect.c	2022-11-04 19:17:03.000000000 +0100
--- src/libespeak-ng/spect.c	2022-11-17 20:59:41.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <errno.h>
  #include <math.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <errno.h>
  #include <math.h>
***************
*** 25,31 ****
--- 25,35 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ // for BYTE_ORDER, BIG_ENDIAN
+ #if HAVE_ENDIAN_H
  #include <endian.h>
+ #endif
+ 
  
  #include <espeak-ng/espeak_ng.h>
  #include <espeak-ng/speak_lib.h>
***************
*** 210,218 ****
  	float total = 0;
  	int maxh;
  	int height;
  	int htab[400];
  	wavegen_peaks_t wpeaks[9];
! 
  	for (h = 0; h < 9; h++) {
  		height = (frame->peaks[h].pkheight * seq_amplitude * frame->amp_adjust)/10000;
  		wpeaks[h].height = height << 8;
--- 214,228 ----
  	float total = 0;
  	int maxh;
  	int height;
+ #if ESPEAK_STACK_HACK
+ 	int* htab = calloc(1, sizeof(int)*400);
+ 	assert(htab!=NULL);
+ 	wavegen_peaks_t* wpeaks = calloc(1, sizeof(wavegen_peaks_t)*9);
+ 	assert(wpeaks!=NULL);
+ #else
  	int htab[400];
  	wavegen_peaks_t wpeaks[9];
! #endif
  	for (h = 0; h < 9; h++) {
  		height = (frame->peaks[h].pkheight * seq_amplitude * frame->amp_adjust)/10000;
  		wpeaks[h].height = height << 8;
***************
*** 226,231 ****
--- 236,246 ----
  	for (h = 1; h < maxh; h++)
  		total += ((htab[h] * htab[h]) >> 10);
  	frame->rms = sqrt(total) / 7.25;
+ 
+ #if ESPEAK_STACK_HACK
+ 	free(htab);
+ 	free(wpeaks);
+ #endif
  	return frame->rms;
  }
  
diff -c original/src/libespeak-ng/speech.c src/libespeak-ng/speech.c
*** original/src/libespeak-ng/speech.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/speech.c	2022-11-17 20:58:26.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <assert.h>
  #include <ctype.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <assert.h>
  #include <ctype.h>
***************
*** 30,36 ****
  #include <string.h>
  #include <sys/stat.h>
  #include <time.h>
! #include <unistd.h>
  #include <wchar.h>
  
  #ifdef HAVE_PCAUDIOLIB_AUDIO_H
--- 30,36 ----
  #include <string.h>
  #include <sys/stat.h>
  #include <time.h>
! //#include <unistd.h>
  #include <wchar.h>
  
  #ifdef HAVE_PCAUDIOLIB_AUDIO_H
***************
*** 337,343 ****
  		return;
  #endif
  
! 	strcpy(path_home, PATH_ESPEAK_DATA);
  }
  
  const int param_defaults[N_SPEECH_PARAM] = {
--- 337,343 ----
  		return;
  #endif
  
! 	strcpy(path_home, path);
  }
  
  const int param_defaults[N_SPEECH_PARAM] = {
diff -c original/src/libespeak-ng/speech.h src/libespeak-ng/speech.h
*** original/src/libespeak-ng/speech.h	2022-10-28 18:10:33.000000000 +0200
--- src/libespeak-ng/speech.h	2022-11-17 20:57:29.000000000 +0100
***************
*** 20,26 ****
  #ifndef ESPEAK_NG_SPEECH_H
  #define ESPEAK_NG_SPEECH_H
  
! #include <endian.h>               // for BYTE_ORDER, BIG_ENDIAN
  #include <espeak-ng/espeak_ng.h>
  
  #if defined(__has_feature)
--- 20,30 ----
  #ifndef ESPEAK_NG_SPEECH_H
  #define ESPEAK_NG_SPEECH_H
  
! // for BYTE_ORDER, BIG_ENDIAN
! #if HAVE_ENDIAN_H
! #include <endian.h>
! #endif
! 
  #include <espeak-ng/espeak_ng.h>
  
  #if defined(__has_feature)
diff -c original/src/libespeak-ng/ssml.c src/libespeak-ng/ssml.c
*** original/src/libespeak-ng/ssml.c	2022-11-13 17:02:43.000000000 +0100
--- src/libespeak-ng/ssml.c	2022-11-17 20:31:40.000000000 +0100
***************
*** 19,25 ****
   */
  
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 19,25 ----
   */
  
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
***************
*** 29,35 ****
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! #include <unistd.h>
  #include <wchar.h>
  #include <wctype.h>
  
--- 29,35 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
! //#include <unistd.h>
  #include <wchar.h>
  #include <wctype.h>
  
diff -c original/src/libespeak-ng/synth_mbrola.c src/libespeak-ng/synth_mbrola.c
*** original/src/libespeak-ng/synth_mbrola.c	2022-10-27 18:30:17.000000000 +0200
--- src/libespeak-ng/synth_mbrola.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
diff -c original/src/libespeak-ng/synthdata.c src/libespeak-ng/synthdata.c
*** original/src/libespeak-ng/synthdata.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/synthdata.c	2022-11-17 20:55:49.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
***************
*** 72,99 ****
  	char buf[sizeof(path_home)+40];
  
  	sprintf(buf, "%s%c%s", path_home, PATHSEP, fname);
- 	length = GetFileLength(buf);
- 	if (length < 0) // length == -errno
- 		return create_file_error_context(context, -length, buf);
  
! 	if ((f_in = fopen(buf, "rb")) == NULL)
! 		return create_file_error_context(context, errno, buf);
! 
! 	if (*ptr != NULL)
! 		free(*ptr);
  
- 	if ((*ptr = malloc(length)) == NULL) {
  		fclose(f_in);
- 		return ENOMEM;
  	}
- 	if (fread(*ptr, 1, length, f_in) != length) {
- 		int error = errno;
- 		fclose(f_in);
- 		free(*ptr);
- 		return create_file_error_context(context, error, buf);
- 	}
- 
- 	fclose(f_in);
  	if (size != NULL)
  		*size = length;
  	return ENS_OK;
--- 72,107 ----
  	char buf[sizeof(path_home)+40];
  
  	sprintf(buf, "%s%c%s", path_home, PATHSEP, fname);
  
! 	// Arduino memory hack using mem_map from https://github.com/pschatzmann/arduino-posix-fs
! 	void* ptmp = espeak_mem_map(buf, &length);
! 	if (ptmp!=NULL){
! 		if (*ptr != NULL)
! 			free(*ptr);
! 		*ptr = ptmp;
! 	} else {
! 		length = GetFileLength(buf);
! 		if (length < 0) // length == -errno
! 			return create_file_error_context(context, -length, buf);
! 		if ((f_in = fopen(buf, "rb")) == NULL)
! 			return create_file_error_context(context, errno, buf);
! 
! 		if (*ptr != NULL)
! 			free(*ptr);
! 
! 		if ((*ptr = malloc(length)) == NULL) {
! 			fclose(f_in);
! 			return ENOMEM;
! 		}
! 		if (fread(*ptr, 1, length, f_in) != length) {
! 			int error = errno;
! 			fclose(f_in);
! 			free(*ptr);
! 			return create_file_error_context(context, error, buf);
! 		}
  
  		fclose(f_in);
  	}
  	if (size != NULL)
  		*size = length;
  	return ENS_OK;
diff -c original/src/libespeak-ng/synthesize.c src/libespeak-ng/synthesize.c
*** original/src/libespeak-ng/synthesize.c	2022-11-01 10:06:27.000000000 +0100
--- src/libespeak-ng/synthesize.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <errno.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <errno.h>
diff -c original/src/libespeak-ng/tr_languages.c src/libespeak-ng/tr_languages.c
*** original/src/libespeak-ng/tr_languages.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/tr_languages.c	2022-11-17 19:39:45.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <locale.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <locale.h>
diff -c original/src/libespeak-ng/translate.c src/libespeak-ng/translate.c
*** original/src/libespeak-ng/translate.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/translate.c	2022-11-17 21:38:00.000000000 +0100
***************
*** 17,23 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <stdbool.h>
--- 17,23 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <stdbool.h>
***************
*** 771,776 ****
--- 771,782 ----
  
  		// replacement 'from' string (skip the remaining part, if any)
  		while (*from != '\0') from++;
+ 
+ 		// pschatzmann - Resolve Endless loop issue in Arduino
+ 		if(is_str_totally_null(from, 4)){
+ 			break;
+ 		}
+ 
  		from++;
  
  		// replacement 'to' string
***************
*** 921,926 ****
--- 927,936 ----
  
  void TranslateClause(Translator *tr, int *tone_out, char **voice_change)
  {
+ 	if (tr == NULL)
+ 		return;
+ 	ESPK_LOG("-> TranslateClause\n");
+ 
  	int ix;
  	int c;
  	int cc = 0;
***************
*** 955,961 ****
--- 965,979 ----
  	int charix_top = 0;
  
  	short charix[N_TR_SOURCE+4];
+ #if ESPEAK_STACK_HACK
+ 	WORD_TAB* words = calloc(1, sizeof(WORD_TAB)*N_CLAUSE_WORDS);
+ 	assert(words!=NULL);
+ 
+ 	WORD_TAB* num_wtab = calloc(1, sizeof(WORD_TAB)*50);
+ 	assert(num_wtab!=NULL);
+ #else
  	WORD_TAB words[N_CLAUSE_WORDS];
+ #endif
  	static char voice_change_name[40];
  	int word_count = 0; // index into words
  
***************
*** 1490,1497 ****
  		char *pn;
  		char *pw;
  		char number_buf[150];
  		WORD_TAB num_wtab[50]; // copy of 'words', when splitting numbers into parts
! 
  		// start speaking at a specified word position in the text?
  		count_words++;
  		if (skip_words > 0) {
--- 1508,1516 ----
  		char *pn;
  		char *pw;
  		char number_buf[150];
+ #if ESPEAK_STACK_HACK==0
  		WORD_TAB num_wtab[50]; // copy of 'words', when splitting numbers into parts
! #endif
  		// start speaking at a specified word position in the text?
  		count_words++;
  		if (skip_words > 0) {
***************
*** 1666,1671 ****
--- 1685,1698 ----
  		else
  			*voice_change = NULL;
  	}
+ 
+ #if ESPEAK_STACK_HACK
+ 	if(words)
+ 		free(words);
+ 	if (num_wtab)
+ 		free(num_wtab);
+ #endif
+ 	ESPK_LOG("<- TranslateClause\n");
  }
  
  static int CalcWordLength(int source_index, int charix_top, short int *charix, WORD_TAB *words, int word_count) {
diff -c original/src/libespeak-ng/translateword.c src/libespeak-ng/translateword.c
*** original/src/libespeak-ng/translateword.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/translateword.c	2022-11-17 20:51:22.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <stdbool.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <stdbool.h>
***************
*** 55,60 ****
--- 55,74 ----
  static int Unpronouncable(Translator *tr, char *word, int posn);
  static int Unpronouncable2(Translator *tr, char *word);
  
+ #if ESPEAK_STACK_HACK
+ typedef struct  {
+ 	char phonemes[N_WORD_PHONEMES];
+ 	char phonemes2[N_WORD_PHONEMES];
+ 	char prefix_phonemes[N_WORD_PHONEMES];
+ 	char unpron_phonemes[N_WORD_PHONEMES];
+ 	char end_phonemes[N_WORD_PHONEMES];
+ 	char end_phonemes2[N_WORD_PHONEMES];
+ 	char word_copy[N_WORD_BYTES];
+ 	char word_copy2[N_WORD_BYTES];
+ 	WORD_TAB wtab_null[8];
+ } TranslateWord3Tables;
+ #endif
+ 
  int TranslateWord3(Translator *tr, char *word_start, WORD_TAB *wtab, char *word_out, bool *any_stressed_words, ALPHABET *current_alphabet, char word_phonemes[], size_t size_word_phonemes)
  {
  	// word1 is terminated by space (0x20) character
***************
*** 72,77 ****
--- 86,104 ----
  	int prefix_type = 0;
  	int prefix_stress;
  	char *wordx;
+ #if ESPEAK_STACK_HACK
+ 	TranslateWord3Tables *tables = calloc(1, sizeof(TranslateWord3Tables));
+ 	assert(tables!=NULL);
+ 	char *phonemes = tables->phonemes;
+ 	char *phonemes2 =tables->phonemes2;
+ 	char *prefix_phonemes=tables->prefix_phonemes;
+ 	char *unpron_phonemes=tables->unpron_phonemes;
+ 	char *end_phonemes=tables->end_phonemes;
+ 	char *end_phonemes2=tables->end_phonemes2;
+ 	char *word_copy=tables->word_copy;
+ 	char *word_copy2=tables->word_copy2;
+ 	WORD_TAB *wtab_null=tables->wtab_null;
+ #else
  	char phonemes[N_WORD_PHONEMES];
  	char phonemes2[N_WORD_PHONEMES];
  	char prefix_phonemes[N_WORD_PHONEMES];
***************
*** 80,87 ****
  	char end_phonemes2[N_WORD_PHONEMES];
  	char word_copy[N_WORD_BYTES];
  	char word_copy2[N_WORD_BYTES];
! 	int word_copy_length;
  	char prefix_chars[0x3f + 2];
  	bool found = false;
  	int end_flags;
  	int c_temp; // save a character byte while we temporarily replace it with space
--- 107,116 ----
  	char end_phonemes2[N_WORD_PHONEMES];
  	char word_copy[N_WORD_BYTES];
  	char word_copy2[N_WORD_BYTES];
! 	WORD_TAB wtab_null[8];
! #endif
  	char prefix_chars[0x3f + 2];
+ 	int word_copy_length;
  	bool found = false;
  	int end_flags;
  	int c_temp; // save a character byte while we temporarily replace it with space
***************
*** 96,105 ****
  	int was_unpronouncable = 0;
  	int loopcount;
  	int add_suffix_phonemes = 0;
- 	WORD_TAB wtab_null[8];
  
  	if (wtab == NULL) {
! 		memset(wtab_null, 0, sizeof(wtab_null));
  		wtab = wtab_null;
  	}
  	wflags = wtab->flags;
--- 125,133 ----
  	int was_unpronouncable = 0;
  	int loopcount;
  	int add_suffix_phonemes = 0;
  
  	if (wtab == NULL) {
! 		memset(wtab_null, 0, 8);
  		wtab = wtab_null;
  	}
  	wflags = wtab->flags;
***************
*** 118,123 ****
--- 146,155 ----
  	if (tr->data_dictlist == NULL) {
  		// dictionary is not loaded
  		word_phonemes[0] = 0;
+ #if ESPEAK_STACK_HACK
+ 		free(tables);
+ #endif
+ 		ESPK_LOG("-> TranslateWord3\n");
  		return 0;
  	}
  
***************
*** 174,179 ****
--- 206,215 ----
  			if (word_out != NULL)
  				strcpy(word_out, word1);
  
+ #if ESPEAK_STACK_HACK
+ 			free(tables);
+ #endif
+ 			ESPK_LOG("-> TranslateWord3\n");
  			return dictionary_flags[0];
  		} else if ((found == false) && (dictionary_flags[0] & FLAG_SKIPWORDS) && !(dictionary_flags[0] & FLAG_ABBREV)) {
  			// grouped words, but no translation.  Join the words with hyphens.
***************
*** 202,207 ****
--- 238,247 ----
  		if (phonemes[0] == phonSWITCH) {
  			// change to another language in order to translate this word
  			strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 			free(tables);
+ #endif
+ 			ESPK_LOG("-> TranslateWord3\n");
  			return 0;
  		}
  
***************
*** 212,223 ****
  
  		if (!found && iswdigit(first_char)) {
  			Lookup(tr, "_0lang", word_phonemes);
! 			if (word_phonemes[0] == phonSWITCH)
  				return 0;
  
  			if ((tr->langopts.numbers2 & NUM2_ENGLISH_NUMERALS) && !(wtab->flags & FLAG_CHAR_REPLACED)) {
  				// for this language, speak English numerals (0-9) with the English voice
  				sprintf(word_phonemes, "%c", phonSWITCH);
  				return 0;
  			}
  
--- 252,272 ----
  
  		if (!found && iswdigit(first_char)) {
  			Lookup(tr, "_0lang", word_phonemes);
! 			if (word_phonemes[0] == phonSWITCH){
! #if ESPEAK_STACK_HACK
! 				free(tables);
! #endif
! 				ESPK_LOG("-> TranslateWord3\n");
  				return 0;
+ 			}	
  
  			if ((tr->langopts.numbers2 & NUM2_ENGLISH_NUMERALS) && !(wtab->flags & FLAG_CHAR_REPLACED)) {
  				// for this language, speak English numerals (0-9) with the English voice
  				sprintf(word_phonemes, "%c", phonSWITCH);
+ #if ESPEAK_STACK_HACK
+ 				free(tables);
+ #endif
+ 				ESPK_LOG("-> TranslateWord3\n");
  				return 0;
  			}
  
***************
*** 253,265 ****
  		phonemes[0] = 0;
  
  		if (SpeakIndividualLetters(tr, word1, phonemes, spell_word, current_alphabet, word_phonemes) == NULL) {
! 			if (word_length > 1)
  				return FLAG_SPELLWORD; // a mixture of languages, retranslate as individual letters, separated by spaces
  			return 0;
  		}
  		strcpy(word_phonemes, phonemes);
! 		if (wflags & FLAG_TRANSLATOR2)
  			return 0;
  
  		addPluralSuffixes(wflags, tr, last_char, word_phonemes);
  		return dictionary_flags[0] & FLAG_SKIPWORDS; // for "b.c.d"
--- 302,324 ----
  		phonemes[0] = 0;
  
  		if (SpeakIndividualLetters(tr, word1, phonemes, spell_word, current_alphabet, word_phonemes) == NULL) {
! #if ESPEAK_STACK_HACK
! 			free(tables);
! #endif
! 			ESPK_LOG("-> TranslateWord3\n");
! 			if (word_length > 1){
  				return FLAG_SPELLWORD; // a mixture of languages, retranslate as individual letters, separated by spaces
+ 			}
  			return 0;
  		}
  		strcpy(word_phonemes, phonemes);
! #if ESPEAK_STACK_HACK
! 		free(tables);
! #endif
! 		ESPK_LOG("-> TranslateWord3\n");
! 		if (wflags & FLAG_TRANSLATOR2){
  			return 0;
+ 		}
  
  		addPluralSuffixes(wflags, tr, last_char, word_phonemes);
  		return dictionary_flags[0] & FLAG_SKIPWORDS; // for "b.c.d"
***************
*** 292,299 ****
  			if (unpron_phonemes[0] == phonSWITCH) {
  				// change to another language in order to translate this word
  				strcpy(word_phonemes, unpron_phonemes);
! 				if (strcmp(&unpron_phonemes[1], ESPEAKNG_DEFAULT_VOICE) == 0)
  					return FLAG_SPELLWORD; // _^_en must have been set in TranslateLetter(), not *_rules which uses only _^_
  				return 0;
  			}
  
--- 351,367 ----
  			if (unpron_phonemes[0] == phonSWITCH) {
  				// change to another language in order to translate this word
  				strcpy(word_phonemes, unpron_phonemes);
! 				if (strcmp(&unpron_phonemes[1], ESPEAKNG_DEFAULT_VOICE) == 0){
! #if ESPEAK_STACK_HACK
! 					free(tables);
! #endif
! 					ESPK_LOG("-> TranslateWord3\n");
  					return FLAG_SPELLWORD; // _^_en must have been set in TranslateLetter(), not *_rules which uses only _^_
+ 				}
+ #if ESPEAK_STACK_HACK
+ 				free(tables);
+ #endif
+ 				ESPK_LOG("-> TranslateWord3\n");
  				return 0;
  			}
  
***************
*** 315,320 ****
--- 383,392 ----
  			if (phonemes[0] == phonSWITCH) {
  				// change to another language in order to translate this word
  				strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 				free(tables);
+ #endif
+ 				ESPK_LOG("-> TranslateWord3\n");
  				return 0;
  			}
  
***************
*** 324,332 ****
  				// ?? should we say super/sub-script numbers and letters here?
  				utf8_in(&wc, wordx);
  				if ((word_length == 1) && (IsAlpha(wc) || IsSuperscript(wc))) {
! 					if ((wordx = SpeakIndividualLetters(tr, wordx, phonemes, spell_word, current_alphabet, word_phonemes)) == NULL)
  						return 0;
  					strcpy(word_phonemes, phonemes);
  					return 0;
  				}
  			}
--- 396,413 ----
  				// ?? should we say super/sub-script numbers and letters here?
  				utf8_in(&wc, wordx);
  				if ((word_length == 1) && (IsAlpha(wc) || IsSuperscript(wc))) {
! 					if ((wordx = SpeakIndividualLetters(tr, wordx, phonemes, spell_word, current_alphabet, word_phonemes)) == NULL){
! #if ESPEAK_STACK_HACK
! 						free(tables);
! #endif
! 						ESPK_LOG("-> TranslateWord3\n");
  						return 0;
+ 					}	
  					strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 					free(tables);
+ #endif
+ 					ESPK_LOG("-> TranslateWord3\n");
  					return 0;
  				}
  			}
***************
*** 401,407 ****
  					char *wordpf;
  					char prefix_phonemes2[12];
  
! 					strncpy0(prefix_phonemes2, end_phonemes, sizeof(prefix_phonemes2));
  					wordpf = &prefix_chars[1];
  					strcpy(prefix_phonemes, phonemes);
  
--- 482,489 ----
  					char *wordpf;
  					char prefix_phonemes2[12];
  
! 					// strncpy0(prefix_phonemes2, end_phonemes, sizeof(prefix_phonemes2));
! 					strncpy0(prefix_phonemes2, end_phonemes, sizeof(char)*N_WORD_PHONEMES);
  					wordpf = &prefix_chars[1];
  					strcpy(prefix_phonemes, phonemes);
  
***************
*** 431,436 ****
--- 513,522 ----
  						// change to another language in order to translate this word
  						wordx[-1] = c_temp;
  						strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 						free(tables);
+ #endif
+ 						ESPK_LOG("-> TranslateWord3\n");
  						return 0;
  					}
  				}
***************
*** 457,462 ****
--- 543,552 ----
  							// change to another language in order to translate this word
  							memcpy(wordx, word_copy, strlen(word_copy));
  							strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 							free(tables);
+ #endif
+ 							ESPK_LOG("-> TranslateWord3\n");
  							return 0;
  						}
  						if (dictionary_flags[0] == 0) {
***************
*** 475,480 ****
--- 565,574 ----
  							// change to another language in order to translate this word
  							memcpy(wordx, word_copy, strlen(word_copy));
  							strcpy(word_phonemes, phonemes);
+ #if ESPEAK_STACK_HACK
+ 							free(tables);
+ #endif
+ 							ESPK_LOG("-> TranslateWord3\n");
  							return 0;
  						}
  
***************
*** 515,520 ****
--- 609,618 ----
  								strcpy(word_phonemes, phonemes);
  								memcpy(wordx, word_copy, strlen(word_copy));
  								wordx[-1] = c_temp;
+ #if ESPEAK_STACK_HACK
+ 								free(tables);
+ #endif
+ 								ESPK_LOG("-> TranslateWord3\n");
  								return 0;
  							}
  						}
***************
*** 667,672 ****
--- 765,774 ----
  
  	dictionary_flags[0] |= was_unpronouncable;
  	memcpy(word_start, word_copy2, word_copy_length);
+ #if ESPEAK_STACK_HACK
+ 	free(tables);
+ #endif
+ 	ESPK_LOG("-> TranslateWord3\n");
  	return dictionary_flags[0];
  }
  
diff -c original/src/libespeak-ng/voices.c src/libespeak-ng/voices.c
*** original/src/libespeak-ng/voices.c	2022-11-17 17:22:11.000000000 +0100
--- src/libespeak-ng/voices.c	2022-11-17 21:41:04.000000000 +0100
***************
*** 18,24 ****
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config.h"
  
  #include <ctype.h>
  #include <wctype.h>
--- 18,24 ----
   * along with this program; if not, see: <http://www.gnu.org/licenses/>.
   */
  
! #include "config-espk.h"
  
  #include <ctype.h>
  #include <wctype.h>
***************
*** 32,38 ****
  #if defined(_WIN32) || defined(_WIN64)
  #include <windows.h>
  #else
! #include <dirent.h>
  #endif
  
  #include <espeak-ng/espeak_ng.h>
--- 32,38 ----
  #if defined(_WIN32) || defined(_WIN64)
  #include <windows.h>
  #else
! #include "direntx.h"
  #endif
  
  #include <espeak-ng/espeak_ng.h>
***************
*** 153,168 ****
  	       &tone_pts[8], &tone_pts[9]);
  }
  
  static espeak_VOICE *ReadVoiceFile(FILE *f_in, const char *fname, int is_language_file)
  {
  	// Read a Voice file, allocate a VOICE_DATA and set data from the
  	// file's  language, gender, name  lines
! 
  	char linebuf[120];
  	char vname[80];
  	char vgender[80];
  	char vlanguage[80];
  	char languages[300]; // allow space for several alternate language names and priorities
  
  	unsigned int len;
  	int langix = 0;
--- 153,191 ----
  	       &tone_pts[8], &tone_pts[9]);
  }
  
+ /// Microcontroller have limited stack: so we move it to the heap
+ #if ESPEAK_STACK_HACK
+ typedef struct  {
+ 	char linebuf[120];
+ 	char vname[80];
+ 	char vgender[80];
+ 	char vlanguage[80];
+ 	char languages[300]; // allow space for several alternate language names and priorities
+ } ReadVoiceFileData;
+ #endif
+ 
  static espeak_VOICE *ReadVoiceFile(FILE *f_in, const char *fname, int is_language_file)
  {
  	// Read a Voice file, allocate a VOICE_DATA and set data from the
  	// file's  language, gender, name  lines
! #if ESPEAK_STACK_HACK
! 	ReadVoiceFileData* data = calloc(1, sizeof(ReadVoiceFileData));
! 	assert(data!=NULL);
! 	char *linebuf =  data->linebuf;
! 	char *vname =  data->vname;
! 	char *vgender = data->vgender;
! 	char *vlanguage = data->vlanguage;
! 	char *languages = data->languages;; // allow space for several alternate language names and priorities
! #else
  	char linebuf[120];
  	char vname[80];
  	char vgender[80];
  	char vlanguage[80];
  	char languages[300]; // allow space for several alternate language names and priorities
+ #endif
+ 	const int vname_size = 80;
+ 	const int linebuf_size = 120;
+ 	const int languages_size = 300;
  
  	unsigned int len;
  	int langix = 0;
***************
*** 178,184 ****
  	vgender[0] = 0;
  	age = 0;
  
! 	while (fgets_strip(linebuf, sizeof(linebuf), f_in) != NULL) {
  		// isolate the attribute name
  		for (p = linebuf; (*p != 0) && !iswspace(*p); p++) ;
  		*p++ = 0;
--- 201,207 ----
  	vgender[0] = 0;
  	age = 0;
  
! 	while (fgets_strip(linebuf, linebuf_size, f_in) != NULL) {
  		// isolate the attribute name
  		for (p = linebuf; (*p != 0) && !iswspace(*p); p++) ;
  		*p++ = 0;
***************
*** 189,195 ****
  		{
  		case V_NAME:
  			while (isspace(*p)) p++;
! 			strncpy0(vname, p, sizeof(vname));
  			break;
  		case V_LANGUAGE:
  			priority = DEFAULT_LANGUAGE_PRIORITY;
--- 212,218 ----
  		{
  		case V_NAME:
  			while (isspace(*p)) p++;
! 			strncpy0(vname, p, vname_size);
  			break;
  		case V_LANGUAGE:
  			priority = DEFAULT_LANGUAGE_PRIORITY;
***************
*** 198,204 ****
  			sscanf(p, "%s %d", vlanguage, &priority);
  			len = strlen(vlanguage) + 2;
  			// check for space in languages[]
! 			if (len < (sizeof(languages)-langix-1)) {
  				languages[langix] = priority;
  
  				strcpy(&languages[langix+1], vlanguage);
--- 221,227 ----
  			sscanf(p, "%s %d", vlanguage, &priority);
  			len = strlen(vlanguage) + 2;
  			// check for space in languages[]
! 			if (len < (languages_size-langix-1)) {
  				languages[langix] = priority;
  
  				strcpy(&languages[langix+1], vlanguage);
***************
*** 219,228 ****
  
  	gender = LookupMnem(genders, vgender);
  
! 	if (n_languages == 0)
  		return NULL; // no language lines in the voice file
  
  	p = (char *)calloc(sizeof(espeak_VOICE) + langix + strlen(fname) + strlen(vname) + 3, 1);
  	voice_data = (espeak_VOICE *)p;
  	p = &p[sizeof(espeak_VOICE)];
  
--- 242,263 ----
  
  	gender = LookupMnem(genders, vgender);
  
! 	if (n_languages == 0){
! #if ESPEAK_STACK_HACK
! 		free(data);
! 		ESPK_LOG("<- ReadVoiceFile: %s\n", fname);
! #endif
  		return NULL; // no language lines in the voice file
+ 	}
  
  	p = (char *)calloc(sizeof(espeak_VOICE) + langix + strlen(fname) + strlen(vname) + 3, 1);
+ 	if (p==NULL) {
+ #if ESPEAK_STACK_HACK
+ 		free(data);
+ 		ESPK_LOG("<- ReadVoiceFile: %s\n", fname);
+ #endif
+ 		return NULL;
+ 	}
  	voice_data = (espeak_VOICE *)p;
  	p = &p[sizeof(espeak_VOICE)];
  
***************
*** 243,248 ****
--- 278,287 ----
  	voice_data->gender = gender;
  	voice_data->variant = 0;
  	voice_data->xx1 = n_variants;
+ #if ESPEAK_STACK_HACK
+ 	free(data);
+ 	ESPK_LOG("<- ReadVoiceFile: %s\n", fname);
+ #endif
  	return voice_data;
  }
  
diff -c original/src/libespeak-ng/wavegen.c src/libespeak-ng/wavegen.c
*** original/src/libespeak-ng/wavegen.c	2022-11-17 19:38:04.000000000 +0100
--- src/libespeak-ng/wavegen.c	2022-11-17 19:39:46.000000000 +0100
***************
*** 20,26 ****
  // this version keeps wavemult window as a constant fraction
  // of the cycle length - but that spreads out the HF peaks too much
  
! #include "config.h"
  
  #include <math.h>
  #include <stdbool.h>
--- 20,26 ----
  // this version keeps wavemult window as a constant fraction
  // of the cycle length - but that spreads out the HF peaks too much
  
! #include "config-espk.h"
  
  #include <math.h>
  #include <stdbool.h>
